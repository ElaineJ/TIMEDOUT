/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg sclk;
  
  wire [1-1:0] M_alu1_overadd;
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_1 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .overadd(M_alu1_overadd),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n)
  );
  
  wire [1-1:0] M_slowclk_value;
  counter_2 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  reg [7:0] M_lightout_d, M_lightout_q = 1'h0;
  reg [7:0] M_lightdbg_d, M_lightdbg_q = 1'h0;
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [8-1:0] M_regs_out;
  reg [1-1:0] M_regs_en;
  reg [8-1:0] M_regs_data;
  register_4 regs (
    .clk(sclk),
    .rst(rst),
    .en(M_regs_en),
    .data(M_regs_data),
    .out(M_regs_out)
  );
  localparam START_testshift = 2'd0;
  localparam SL_testshift = 2'd1;
  localparam BUTTON_testshift = 2'd2;
  localparam END_testshift = 2'd3;
  
  reg [1:0] M_testshift_d, M_testshift_q = START_testshift;
  
  always @* begin
    M_testshift_d = M_testshift_q;
    M_lightout_d = M_lightout_q;
    M_lightdbg_d = M_lightdbg_q;
    
    sclk = M_slowclk_value;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu1_alufn = 6'h20;
    M_alu1_b = 1'h1;
    M_alu1_a = M_regs_out;
    M_regs_data = M_alu1_alu;
    M_lightout_d = M_alu1_alu;
    io_led[0+7-:8] = M_lightout_q;
    M_lightdbg_d = M_regs_out;
    io_led[8+7-:8] = M_lightdbg_q;
    M_regs_en = 1'h0;
    
    case (M_testshift_q)
      START_testshift: begin
        M_regs_data = 8'h01;
        M_regs_en = 1'h1;
        M_testshift_d = SL_testshift;
      end
      SL_testshift: begin
        M_regs_en = 1'h1;
        if (M_regs_out == 8'h80) begin
          M_regs_data = 8'h01;
        end
        if (io_button[0+0-:1]) begin
          M_testshift_d = BUTTON_testshift;
        end
      end
      BUTTON_testshift: begin
        M_regs_en = 1'h0;
        if (M_regs_out == 8'h20) begin
          M_testshift_d = START_testshift;
        end else begin
          M_testshift_d = END_testshift;
        end
      end
      END_testshift: begin
        M_regs_data = 8'hff;
      end
    endcase
  end
  
  always @(posedge sclk) begin
    if (rst == 1'b1) begin
      M_testshift_q <= 1'h0;
    end else begin
      M_testshift_q <= M_testshift_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_lightout_q <= 1'h0;
      M_lightdbg_q <= 1'h0;
    end else begin
      M_lightout_q <= M_lightout_d;
      M_lightdbg_q <= M_lightdbg_d;
    end
  end
  
endmodule

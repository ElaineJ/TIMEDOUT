module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button[5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    input button,
    input reset_btn
    ) {
  
  sig rst;                  // reset signal
  sig sclk;
  alu alu1;
  sig mybutton; //button to stop the shifiting of led bulbs
   
    
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      counter slowclk(#SIZE(1),#DIV(25));  //created different clock speeds
      counter slow2clk(#SIZE(1),#DIV(23));
      counter slow3clk(#SIZE(1),#DIV(22));
      counter slow4clk(#SIZE(1),#DIV(21));
      counter slow5clk(#SIZE(1),#DIV(20));
      dff lightout[8];
      dff lightdbg[8];
      xcounter xcount;
      multi_seven_seg seg;
      multi_dec_ctr dectr;

    }
    edge_detector edge_detector(#FALL(1),#RISE(0));
    button_conditioner btn_cond;
    reset_conditioner reset_cond;
  }
  .clk(sclk){
  
    .rst(rst){
       register regs(#WIDTH(8));
       registertarget regstarget(#WIDTH(8));
       fsm testshift ={START,SL1,SL2,SL3,SL4,SL5,CHECK2,CHECK3,CHECK4,CHECK5,BUTTON,END};
       
    }        
            
  }
  always {
    regstarget.en = 0;
    regstarget.data = 0;
    //sclk=slowclk.value;
    if (io_dip[0][0] ==1)
      sclk = slowclk.value;
    else if(io_dip[0][1] ==1)
      sclk = slow2clk.value;
    else if (io_dip[0][2] ==1)
      sclk = slow3clk.value;
    else if (io_dip[0][3] ==1)
      sclk = slow4clk.value;
    else if (io_dip[0][4] ==1)
      sclk = slow5clk.value;    
    else 
      sclk = slowclk.value;
    //s2clk = slow2clk.value;     
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    btn_cond.in = button;
    edge_detector.in = btn_cond.out;
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off       
    io_seg= ~seg.seg;
    io_sel= ~seg.sel;
    //mybutton = io_button[0];
    mybutton=~button;
    xcount.button= !mybutton;
    //xcount.button=!button;
    
    //mybutton = ~button;
    edge_detector.in=xcount.count;
    dectr.inc = edge_detector.out;
    seg.values = dectr.digits;
    //led[0]=button;
    /*
    io_led [0] = 8b00001000;
    alu1.alufn = 6b100000;
    io_led [1] = alu1.alu;
    alu1.a = io_dip[0];
    alu1.b = io_dip[1];
    */
    /*
    btn_cond.in=io_button[0];
    edge.in=btn_cond.out;
    regs.en=edge.out;
    regs.rst=rst;
    io_led[0]=regs.out;
    regs.data=io_dip[0];

    */
    alu1.alufn = 6b100000; //shift left 
    //alu1.alufn = 6b110011; //CMPEQ
    alu1.b = 1; //connect b to 1
    alu1.a = regs.out; //connect a to the register
    regs.data = alu1.alu;//output of ALU is put into the input of the register(data)
   
    //lightout.d = alu1.alu; //output of alu connect to light
    //io_led[0]=lightout.q; // 
    lightdbg.d=regs.out;
    io_led[1]=lightdbg.q;
   // edge.in=wr;
    //regs.en=edge.out;
    //regs.en=wr;
    regs.en=0;
    
    case(testshift.q){
      testshift.START:
        regs.data=8b00000001; // starting stage
        regs.en=1;
        testshift.d=testshift.SL1;
        
      testshift.SL1:
        regs.en=1;
        sclk = slowclk.value;
       if(regs.out==8b10000000){// when reached the end of the rows of light bulbs it will returned to the inital starting light bulbs
        regs.data=8b00000001;
        }
       if (mybutton){
        
        testshift.d = testshift.BUTTON; // when button is pressed, move to button state
        }
        
       testshift.SL2:
        regs.en=1;
        sclk = slow2clk.value;
       if(regs.out==8b10000000){
        regs.data=8b00000001;
        }
       if (mybutton){   //when button is pressed move to check2 state
        testshift.d = testshift.CHECK2;
        } 
       
       testshift.SL3:
        regs.en=1;
        sclk = slow3clk.value;
       if(regs.out==8b10000000){
        regs.data=8b00000001;
        }
       if (mybutton){    //when button is pressed moved to check3 state
        testshift.d = testshift.CHECK3;
        } 
        
       testshift.SL4:
        regs.en=1;
        sclk = slow4clk.value;
       if(regs.out==8b10000000){
        regs.data=8b00000001;
        }
       if (mybutton){    //when button is pressed moved to check4 state
        testshift.d = testshift.CHECK4;
        } 
       
       testshift.SL5:
        regs.en=1;
        sclk = slow4clk.value;
       if(regs.out==8b10000000){
        regs.data=8b00000001;
        }
       if (mybutton){    //when button is pressed moved to check5 state 
        testshift.d = testshift.CHECK5;
        } 
        
        
        /*
       testshift.SL4:
        regs.en=1;
        sclk = slow4clk.value;
       if(regs.out==8b10000000){
        regs.data=8b00000001;
        }
       if (io_button[0]){
        testshift.d = testshift.BUTTON4;
        }  
       
       /* 
       testshift.SL5:
        regs.en=1;
        sclk = slow5clk.value;
       if(regs.out==8b10000000){
        regs.data=8b00000001;
        }
       if (io_button[0]){
        testshift.d = testshift.BUTTON5;
        }  
        */
      testshift.BUTTON:
        alu1.alufn = 6b110011;//CMPEQ
        alu1.b = 8b00100000;
        regs.en = 0;
       if (alu1.alu == 8b00000001){      
        testshift.d = testshift.SL2;
        }  
       else{
        testshift.d = testshift.END;
        }
        
      testshift.CHECK2:
        regs.en = 0;
       if (regs.out == 8b00100000){
        testshift.d = testshift.SL3;
        }  
       else{
        testshift.d = testshift.END;
        } 
        
        
      testshift.CHECK3:
        regs.en = 0;
       if (regs.out == 8b00100000){        
        testshift.d = testshift.SL4;
        }  
       else{
        testshift.d = testshift.END;
        } 
        
      testshift.CHECK4:
        regs.en = 0;
       if (regs.out == 8b00100000){
        testshift.d = testshift.SL5;
        }  
       else{
        testshift.d = testshift.END;
        }  
      
      testshift.CHECK5:
        regs.en = 0;
       if (regs.out == 8b00100000){
        testshift.d = testshift.END;
        }  
       else{
        testshift.d = testshift.END;
        }   
           
      testshift.END:
        regs.data = 8b11111111;
        //testshift.d=testshift.END;
      }
    
  }
}
